upstream puma_<%= fetch(:nginx_config_name) %> { <%
  flags = 'fail_timeout=0'
  @backends = [fetch(:puma_bind)].flatten.map do |m|
  etype, address  = /(tcp|unix|ssl):\/{1,2}(.+)/.match(m).captures
  if etype =='unix'
    "server #{etype}:#{address} #{fetch(:nginx_socket_flags)};"
  else
    "server #{address.gsub(/0\.0\.0\.0(.+)/, "127.0.0.1\\1")} #{fetch(:nginx_http_flags)};"
  end
end
%><% @backends.each do |server|  %>
  <%= server %><% end %>
}
<% if fetch(:nginx_use_ssl) %>
server {
  listen 80;
  rewrite ^(.*) https://$host$1 permanent;
}
<% end %>

server {
<% if fetch(:nginx_use_ssl) %>
  listen 443;
  ssl on;
  ssl_certificate /etc/ssl/certs/<%= fetch(:nginx_config_name) %>.crt;
  ssl_certificate_key /etc/ssl/private/<%= fetch(:nginx_config_name) %>.key;
<% else %>
  listen 3000;
<% end %>

  client_max_body_size 30m;
  keepalive_timeout 10;
  reset_timedout_connection on;

  <!-- Custom timeouts for clients - change if they break anything -->
  client_body_timeout 12;
  client_header_timeout 12;
  send_timeout 10;

  error_page 500 502 504 /500.html;
  error_page 503 @503;

  server_name <%= fetch(:nginx_server_name) %>;
  root <%= current_path %>/public;
  try_files $uri/index.html $uri @puma_<%= fetch(:nginx_config_name) %>;

  <!-- Protect the system "dot" files -->
  location ~ /\. {
    deny all;
    error_log off;
    log_not_found off;
  }

  location @puma_<%= fetch(:nginx_config_name) %> {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
<% if fetch(:nginx_use_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
<% end %>
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    # limit_req zone=one;

    <!-- TODO: Stop logging access logs if we start taking too much traffic "access_log off;" -->
    # put this in nginx.conf/http section
    #log_format timed_combined '$remote_addr - $remote_user [$time_local] '
    #    '"$request" $status $body_bytes_sent '
    #    '"$http_referer" "$http_user_agent" '
    #    '($request_time) ($upstream_response_time) $pipe';

    access_log <%= shared_path %>/log/nginx.access.log timed_combined;

    error_log <%= shared_path %>/log/nginx.error.log;

    auth_basic "Restricted Content";
    auth_basic_user_file /etc/nginx/.htpasswd;
  }

  location ^~ /assets/ {
    gzip_static on;
    <!-- gzip on; -->
    <!-- gzip_types text/plain application/xml text/css application/javascript; -->
    <!-- gzip_min_length 1000; -->
    expires max;
    add_header ETag "";
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }

  location @503 {
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) {
      rewrite ^(.*)$ /system/maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }

  location ~ \.(php)$ {
    return 405;
  }
}
